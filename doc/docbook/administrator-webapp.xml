<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<chapter id="administrator-webapp">
    <title>Administrator manual for the web application</title>
    <section id="administrator-webapp.introduction">
        <title>Introduction</title>
        <para>TODO</para>
    </section>
    <section id="administrator-webapp.requirements">
        <title>Requirements</title>
        <para>
            The following software is needed to compile and run the web
            application. Servlet containers other than
            <application>Jetty</application> may work, but this is untested,
            and the configuration instructions may be Jetty-specific.
        </para>
        <itemizedlist>
            <listitem>
                <para><application>Java Development Kit</application>, at least
                    version 6.
                </para>
            </listitem>
            <listitem>
                <para><application>Jetty</application>, the web server. These
                    instructions are for version 9.2 on Ubuntu 18.04. AbacusCM
                    has previously been used on older versions (going back to
                    Jetty 6.x), but the configuration syntax changes between
                    versions.
                </para>
            </listitem>
            <listitem>
                <para><application>Maven 3</application>, which is the build
                    system for the web application (Maven 2 might still work).
                </para>
            </listitem>
            <listitem>
                <para>It is highly recommended that the HTML DTDs are installed
                    locally (e.g. in Ubuntu this is in the
                    <systemitem>w3c-dtd-html</systemitem> package). Otherwise,
                    these will be fetched from the internet on each build,
                    which can be very slow.
                </para>
                <para>Older Ubuntu installations of the DTD had a bug that
                    prevent it from working properly (see <ulink
                        url="https://bugs.launchpad.net/ubuntu/+source/w3c-dtd-xhtml/+bug/400259">this
                        bug</ulink>). In short, you need to look for
                    <filename>catalog.xml</filename> files in <filename
                        class="directory">/usr/share/xml/xhtml</filename> and
                    <filename
                        class="directory">/usr/share/xml/entities/xhtml</filename>
                    and replace <literal>http://globaltranscorp.org/oasis/catalog/xml/tr9401.dtd</literal>
                    in the header with <literal>file:////usr/share/xml/schema/xml-core/tr9401.dtd</literal>.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            <application>Maven</application> will also download assorted Java
            packages the first time it is run, so an internet connection will
            be required. After the first time it should be possible to build
            while offline.
        </para>
    </section>
    <section id="administrator-webapp.build">
        <title>Building</title>
        <para>All building is done from the <filename
                class="directory">webapp</filename> directory. Build the web
            application by running
        </para>
        <screen><prompt>$ </prompt><userinput>mvn</userinput></screen>
        <para>
            This will produce
            <filename>target/abacuscm-1.0-SNAPSHOT.war</filename>, and will
            also place a copy in <filename
                class="directory">$<envar>HOME</envar>/.m2/repository/abacuscm/abacuscm/1.0-SNAPSHOT/</filename>.
        </para>
    </section>
    <section id="administrator-webapp.configuration">
        <title>Configuration</title>
        <para>
            The first thing you will need to do is configure a Jetty server to
            start up. The process for doing this will vary between platforms,
            but on Ubuntu you will most likely need to edit
            <filename>/etc/default/jetty</filename> to change
            <varname>NO_START</varname> to zero, and possibly to edit other
            parameters there as well.
        </para>
        <para>
            Note that getting Jetty to run on a standard HTTP port (80) is
            non-trivial; it is probably best to get all the setup done before
            trying to switch it over to a standard port.
        </para>
        <para>
            I have also found that sometimes Jetty will only listen on IPv6. I
            have worked around this by adding
            <userinput>JAVA_OPTIONS="-Djava.net.preferIPv4Stack=true"</userinput>
            to <filename>/etc/default/jetty</filename>.
        </para>
        <section id="administrator-webapp.configuration.keystore">
            <title>Creating the keystore</title>
            <para>
                When the web application (on the web server side) connects to
                the abacus server, it needs to be able to verify the
                certificate presented by the abacus server. For this, it needs
                the certificate for the CA used to sign that certificate
                (generated in <xref
                    linkend="administrator-core.certificates"/>; it
                also needs to be imported into a Java keystore.
            </para>
            <para>
                This can be done as follows:
            </para>
            <screen><prompt>$ </prompt><userinput>keytool -importcert -alias abacuscert -file <replaceable>cacert.crt</replaceable> \
    -keystore <replaceable>abacus_keystore</replaceable> -noprompt</userinput>
<computeroutput>Enter keystore password:
Re-enter new password:
Certificate was added to keystore</computeroutput></screen>
            <para>
                Since the keystore contains only a certificate and no keys,
                the password does not need to be secure (and probably should
                not be a secure password used elsewhere, since it will be
                stored in plain text in a configuration file).
            </para>
            <para>
                Refer to <xref
                    linkend="administrator-webapp.configuration.context"/> for
                information about how to point the web application at this new
                keystore.
            </para>
        </section>
        <section id="administrator-webapp.configuration.context">
            <title>Configuring the context</title>
            <para>
                In <filename class="directory">/var/lib/jetty9/webapps</filename>
                (or wherever Jetty is configured to find webapps),
                create an XML file with the following content (the filename
                is arbitrary; we use <filename>abacuscm.xml</filename>):
            </para>
            <programlisting language="xml">&lt;?xml version="1.0"  encoding="ISO-8859-1"?&gt;
&lt;!DOCTYPE Configure
    PUBLIC "-//Mort Bay Consulting//DTD Configure//EN"
    "http://jetty.mortbay.org/configure.dtd"&gt;
&lt;Configure class="org.mortbay.jetty.webapp.WebAppContext"&gt;
  &lt;Set name="contextPath"&gt;<replaceable>/contextPath</replaceable>&lt;/Set&gt;
  &lt;Set name="war"&gt;<filename><replaceable>/path/to/war</replaceable></filename>&lt;/Set&gt;
  &lt;Set name="overrideDescriptor"&gt;&lt;SystemProperty name="jetty.home"
      default="." /&gt;<filename><replaceable>/etc/abacuscm-secret-web.xml</replaceable></filename>&lt;/Set&gt;
&lt;/Configure&gt;</programlisting>
            <para>
                The <varname>contextPath</varname> is the path
                within the server URL at which clients will access the web
                application, while
                <filename><replaceable>/path/to/war</replaceable></filename>
                is the path to the <filename class="extension">.war</filename>
                file created by the build. Note that this file will need to be
                accessible to Jetty, in which case it may be necessary to copy
                it from where it was built to a deployment area.
            </para>
            <note>
                <para>
                    Although this is a <quote>hot</quote> deployment, only
                    this XML configuration file is scanned for changes. If you
                    change the <filename class="extension">.war</filename>
                    file, you will need to <command>touch</command> this file
                    (or restart Jetty) to trigger an update.
                </para>
            </note>
            <para>
                The <varname>overrideDescriptor</varname> can be set to any
                path, which points to a file containing extra configuration
                data specific to this deployment. It should contain the
                following:
            </para>
            <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
             http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5"&gt;

    &lt;servlet&gt;
        &lt;servlet-name&gt;initializer&lt;/servlet-name&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;abacusHost&lt;/param-name&gt;
            &lt;param-value&gt;<replaceable>host name</replaceable>&lt;/param-value&gt;
        &lt;/init-param&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;abacusPort&lt;/param-name&gt;
            &lt;param-value&gt;<replaceable>port number</replaceable>&lt;/param-value&gt;
        &lt;/init-param&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;trustStoreURL&lt;/param-name&gt;
            &lt;param-value&gt;<replaceable>URL</replaceable>&lt;/param-value&gt;
        &lt;/init-param&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;trustStorePassword&lt;/param-name&gt;
            &lt;param-value&gt;<replaceable>password</replaceable>&lt;/param-value&gt;
        &lt;/init-param&gt;
    &lt;/servlet&gt;

    &lt;security-constraint&gt;
        &lt;web-resource-collection&gt;
            &lt;web-resource-name&gt;abacus&lt;/web-resource-name&gt;
            &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
        &lt;/web-resource-collection&gt;
        &lt;user-data-constraint&gt;
            &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;
        &lt;/user-data-constraint&gt;
    &lt;/security-constraint&gt;
&lt;/web-app&gt;</programlisting>
            <para>
                The <varname>abacusHost</varname> and
                <varname>abacusPort</varname> parameters are optional, and
                default to <systemitem class="server">localhost</systemitem>
                and 7368 respectively.
            </para>
            <para>The <varname>trustStoreURL</varname> must be the URL of the
                keystore configured in <xref
                    linkend="administrator-webapp.configuration.keystore"/>.
                If the file is on the local machine, it must use a
                <systemitem>file://</systemitem> URL rather than a filename.
            </para>
            <para>
                The <literal>security-constraint</literal> section redirects
                HTTP traffic to HTTPS; do not use it if you are serving over HTTP.
            </para>
        </section>
        <section id="administrator-webapp.configuration.ports">
            <title>Running Jetty on standard ports</title>
            <para>
                Ubuntu 18.04 can run Jetty on ports 80/443 by using
                authbind, but I have not tried it. An alternative is to use
                iptables (<ulink
                    url="http://www.netfilter.org/">netfilter</ulink>) to redirect
                the standard ports to the jetty ports.  Assuming you don't have
                any NAT rules already set up, but do have iptables installed,
                this can be achieved with the following commands:
            </para>
            <programlisting language="">
iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT \
    --to-ports <replaceable>8443</replaceable>
iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT \
    --to-ports <replaceable>8080</replaceable></programlisting>
        </section>
    </section>
    <section id="administrator-webapp.configuration.ssl">
        <title>Enabling TLS in Jetty</title>
        <para>
            Configuring TLS for Jetty is a little more complicated than for
            Apache, so you may want to consider using haproxy, apache, nginx or
            lighttpd to offload SSL instead.
        </para>
        <para>For the purposes of this discussion I'm going to assume you have
            three files called <filename>key.pem</filename>,
            <filename>cert.pem</filename> and <filename>cachain.pem</filename>
            that contains your private key, X.509 certificate (as signed by
            your certificate authority) and the CA's certificate chain, all in
            PEM format.
        </para>
        <para>
            First we need to convert the PEM files into PKCS12 format as
            required by the java keytool.
        </para>
        <programlisting>openssl pkcs12 -inkey key.pem -in &lt;(cat cert.pem cachain.pem) \
    -export -out jetty.pkcs12</programlisting>
        <para>
            This will generate a password-protected pkcs12 file containing
            both the certificate, along with its chain, and the private key,
            which we can import into a java keystore:
        </para>
        <programlisting>keytool -importkeystore -srckeystore ~/jetty.pkcs12 \
    -srcstoretype PKCS12 -destkeystore /etc/jetty9/keystore</programlisting>
        <para>
            Create a file in <filename
                class="directory">/etc/jetty9/start.d</filename> (e.g.
            called <filename>https.ini</filename>), with the following
            content. Use the password you specified for the keystore in the
            previous step.
        </para>
        <programlisting>--module=ssl,https
https.port=8443
jetty.truststore.password=password
jetty.keystore.password=password
jetty.keymanager.password=password</programlisting>
    </section>
</chapter>
