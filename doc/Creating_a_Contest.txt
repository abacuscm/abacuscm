Creating a Contest
******************

How to configure an AbacusCM server with a contest.

1. Creating the CA
******************

The first step is to create a CA for the required PKI infrastructure.  This is
needed because AbacusCM relies rather heavily upon SSL for verification of
servers.

To create the CA go into the certs/ directory and run the command:

./makeca.sh

This will run for a while and then prompt for some details, you can mostly just
fill in here whatever you want.  Be warned though that "Server Name" isn't
exactly what you expect it to be, this is CN field, and should probably be
something like "AbacusCM CA".

2. Creating a certificate
*************************

Each server needs a certificate.  Theoretically this could be done using
certificate requests but we haven't bothered with that yet.  We've been
distributing the private keys using ssh so far and is pretty confident that
they haven't yet been compromised.  If you feel that you would prefer to use
requests and then signing those requests, please feel free to implement that
and please submit the patches.

To create a key for a server you should use the ./addserver.sh script.  This
script takes a single parameter, the name of the certificate (Usually the
server name).  Example:

./addserver.sh pug

This will create a key and a certificate request for pug and then proceed to
sign that request with the previously generated CA.  Again you can enter just
about any details when prompted, you should however, entre the fully qualified
domain name when asked for "Server name" (the name that users of the AbacusCM
client will enter when connecting to the server). Also be sure to enter
a "State or Province Name" or it will fail.

When the script is done it will symlink the keys and certificates into certs/
as servername.{crt,key}.

3. Creating the database
************************

The next step is to create a database for the abacus server to store it's data
in.  One also needs to provide the server with the appropriate privileges to
manipulate this data.  We haven't yet determined a minimal set of privileges
and have been working with all privileges mostly so far (assuming the MySQL
server is running on localhost):

# mysql -u root -p -h localhost
> create database abacus;
> grant all privileges on abacus.* to abacus@localhost identified by 'counting beeds';
> quit
#

Once the database has been created you need to load the base structure from
db/structure.sql:

# mysql -u abacus -p -h localhost abacus < db/structure.sql
Password:
#

If everything went well you now have a blank database from where the contest
can be run.

4. Configuring the server
*************************

You should use the default config as a starting point.  You should change the
following details in the config file (conf/server.conf):

1. MySQL details.
2. In the [clientlistener] section you should change the X509 and private options.
3. In the initialisation section you want to make sure the type is set to master
    (for the first server) and the name is what you passed to the
    ./addserver.sh script.
4. Set the admin_password to whatever you want the admin password to be set to
   the *first* time you launch the server (after that this setting has no
   effect).
5. You should update the init_attribs section.  There is unfortunately not much
    info about this yet, so just fix up the IP and leave it at that.

5. rijndael KEY + IV
********************

You will most likely want your own dedicated rijndael KEY and IV values, these
has to contain the same values on all servers (these values are used for
inter-server encryption).

# dd if=/dev/random of=conf/rijndael.key bs=32 count=1
# dd if=/dev/random of=conf/rijndael.iv bs=16 count=1

6. Starting up your first server instance
*****************************************

Everything should now be ready to fire up your first server instance:

# bin/abacusd conf/server.conf

If stuff breaks.  Recheck everything, file a bug.  Even a problem with this
document is considered a bug.

If everything worked ok you should see lots of INFO (and some DEBUG) messages
and then two NOTICE messages:

Mon Jul 31 14:08:02 2006 [NOTICE]: Added server 'pug'
Mon Jul 31 14:08:02 2006 [NOTICE]: Added user 'admin'

If you see this (Where pug is replaced with your server name), you have
successfully started up the abacusd server.

7.  Configuring the client
**************************

The only critical component is the cacert option under [server].  All other
options can be changed from within the GUI, and the default should be ok.

8.  Starting the abacus client
******************************

The client attampts to read it's config file from a couple of locations, first
/etc/abacus/client.conf, then ~/.abacus and lastly abacus.conf in the current
directory.  If more than one of these is found they are read in order and
options from later config files override those in earlier config files.

It is recommended to symlink conf/client.conf to ~/.abacus for development use:

# ln -s $(pwd)/conf/client.conf ~/.abacus

One can then start the client:

# bin/abacus

9.  Connecting to the server
****************************

The client in itself is pretty much useless.  It can't really do anything without being connected to a server.

9.1  Select "Connect" from the "Abacus" menu.
9.2  If the server and service values need correction, fix them now.
9.3  Enter the username 'admin'
9.4  Enter the password 'admin' (or whatever you set in server.conf)
9.5  Click "OK"
9.6  You should see a message "You are now connected to the server".

If you did not set a secure password in server.conf, it is recommended to
immediately change the password by selecting "Change password" from the
"Abacus" menu.  If you are an admin user you'll get a drop-down with all
registered users (only 'admin' by default), you can now change the user
password.

From here you can control the server as you would expect.

10. Setting up a marker
***********************

I recommend using the adduser tool to create a new user for the marker, something like:

bin/adduser ${HOME}/.abacus admin adminpass marker "Marker A" markme marker

This will create a new user called 'marker' with password markme.

Now you should copy the marker.conf.sample for each intended marker, I
recommend using filenames such as marker.${username}.conf, so for the above:

cp conf/marker.conf.sample conf/marker.marker.conf

You will need to update at least the following config options (double check the
other settings too):

In the [server] section:
address=
username=
password=

In the [marker] section.
user=
group=

This is especially important if you run multiple markers on the same machine.
Note that it should be different from the user running the actual markerd
process (which should also not be root).

Now you need to update bin/runlimit to be suid root (it needs access to
seteuid, setegid, setuid, setgid and chroot, so if you prefer to use
capabilities check the man pages for what you require).

From here you simply need to run the markerd with something like:

while true; do bin/markerd conf/marker.marker.conf; done

This will restart the markerd in the unlikely event of a crash.

You can also put all common marker options (everything except the username and
password in [server] and the user and group in [marker] presumably) in a common
config file in /etc/abacus/marker.conf.
